"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1484],{93820:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(74848),r=t(28453);const s={sidebar_position:1},i="Backend API",a={id:"api-specification/backend-api",title:"Backend API",description:"openapi: 3.0.0",source:"@site/docs/api-specification/backend-api.mdx",sourceDirName:"api-specification",slug:"/api-specification/backend-api",permalink:"/project-003-story-builder-team-1/docs/api-specification/backend-api",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-003-story-builder-team-1/edit/main/documentation/docs/api-specification/backend-api.mdx",tags:[],version:"current",lastUpdatedBy:"Kamaljeeth Vijay",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"API Specification",permalink:"/project-003-story-builder-team-1/docs/category/api-specification"},next:{title:"API 1 - Swagger Petstore",permalink:"/project-003-story-builder-team-1/docs/api-specification/openapi-spec"}},p={},c=[];function d(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"backend-api",children:"Backend API"}),"\n",(0,o.jsx)(e.p,{children:"openapi: 3.0.0"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"info:\n  title: Story Builder API\n  version: 0.0.0\n  description: API for communication between frontend user interface, LLM Agents, and MongoDB Database.\n"})}),"\n",(0,o.jsx)(e.p,{children:"paths:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"  /courier/story_call:\n    post:\n      summary: Calls the LLM with a given prompt and returns text.\n      operationId: story_call\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                PLACEHOLDER:\n                  type: integer\n                key:\n                  type: string\n                prompt:\n                  type: string\n      responses:\n        '200':\n          description: A story snippet\n          content:\n            application/json:\n              schema:\n                type: string\n                \n  /courier/story_push:\n    post:\n      summary: Pushes local story content to the system.\n      operationId: story_push\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                local_story:\n                  type: string\n      responses:\n        '200':\n          description: Success\n          \n  /courier/judge:\n    get:\n      summary: Invokes the judge() method to get a list of judgments/results\n      operationId: judge\n      responses:\n        '200':\n          description: A list of judgments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n\n  /prompt_admin/prompt:\n    get:\n      summary: Calls prompt(prompt_info) to fetch a prompt string.\n      operationId: prompt\n      parameters:\n        - name: prompt_info\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A prompt string\n          content:\n            application/json:\n              schema:\n                type: string\n\n  /promot_admin/refine_prompt:\n    get:\n      summary: Retrieves the refine_prompt property.\n      operationId: refine_prompt\n      responses:\n        '200':\n          description: A refine prompt string\n          content:\n            application/json:\n              schema:\n                type: string\n                \n  /prompt_admin/generate_prompt:\n    get:\n      summary: Retrieves the generate_prompt property.\n      operationId: generate_prompt\n      responses:\n        '200':\n          description: A generate prompt string\n          content:\n            application/json:\n              schema:\n                type: string\n\n  /prompt_admin/rank_prompt:\n    get:\n      summary: Retrieves the rank_prompt property.\n      operationId: rank_prompt\n      responses:\n        '200':\n          description: A rank prompt string\n          content:\n            application/json:\n              schema:\n                type: string\n\n  /db/grab:\n    get:\n      summary: Calls DB_grab() to retrieve some global data.\n      operationId: grab\n      responses:\n        '200':\n          description: JSON data\n          content:\n            application/json:\n              schema:\n                type: object\n                \n  /db/account:\n    get:\n      summary: Retrieves account info given some input JSON.\n      operationId: account\n      parameters:\n        - in: query\n          name: account_query_info\n          required: true\n          schema:\n            type: object\n            description: JSON containing account query details.\n      responses:\n        '200':\n          description: JSON account data\n          content:\n            application/json:\n              schema:\n                type: object\n  /db/agent:\n    get:\n      summary: Retrieves agent info.\n      operationId: agent\n      responses:\n        '200':\n          description: JSON agent data\n          content:\n            application/json:\n              schema:\n                type: object\n                \n  /db/new_account:\n    post:\n      summary: Creates a new account.\n      operationId: new_account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: JSON containing new account details.\n      responses:\n        '200':\n          description: JSON status information\n          content:\n            application/json:\n              schema:\n                type: object\n                \n  /db/new_agent:\n    post:\n      summary: Creates a new agent.\n      operationId: new_agent\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: JSON containing new agent details.\n      responses:\n        '200':\n          description: JSON status information\n          content:\n            application/json:\n              schema:\n                type: object\n                \n  /db/agent_dropdown:\n    get:\n      summary: Returns a list of agents for a dropdown.\n      operationId: agent_dropdown\n      responses:\n        '200':\n          description: JSON list of agents\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n\n  /translator/rank_format:\n    post:\n      summary: Triggers the rank_format() method.\n      operationId: rank_format\n      responses:\n        '200':\n          description: Success\n\n  /translator/writing_session:\n    post:\n      summary: Starts or updates a writing session.\n      operationId: writing_session\n      responses:\n        '200':\n          description: Success\n          \n  /translator/write_chapter:\n    post:\n      summary: Writes a new chapter based on the input JSON.\n      operationId: write_chapter\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                chapter_info:\n                  type: object\n      responses:\n        '200':\n          description: Chapter data\n          content:\n            application/json:\n              schema:\n                type: object\n                \n  /translator/story_bank:\n    get:\n      summary: Retrieves the entire story bank as a list.\n      operationId: story_bank\n      responses:\n        '200':\n          description: A list of stories\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n"})})]})}function m(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var o=t(96540);const r={},s=o.createContext(r);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);