services:

  agent-1:
    image: "agent-1"  # Unique image name per agent
    build: 
      context: ./storybuilder/Agent/agent_container/  # Path to the agent's build context
      dockerfile: ./Dockerfile  # Path to the agent's Dockerfile
    container_name: "agent-1"  # Unique container name
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}  # OpenAI API key for the agent
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}  # DeepSeek API key for the agent
      - API_KEY=${DEEPSEEK_API_KEY}
      - AGENT_NAME=${AGENT_NAME}
      - DOCKER=true
    volumes:
      - ./logs/:/app/logs  # Host ./logs/backend → /app/logs in container
    networks:
      - storybuilder-network  # Connect to the shared network

  agent-2:
    image: "agent-2"  # Unique image name for the second agent
    build:
      context: ./storybuilder/Agent/agent_container/  # Same build context as the first agent
      dockerfile: ./Dockerfile  # Same Dockerfile
    container_name: "agent-2"  # Unique container name for the second agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}  # OpenAI API key for the agent
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}  # DeepSeek API key for the agent
      - API_KEY=${DEEPSEEK_API_KEY}
      - AGENT_NAME=${AGENT_NAME}-2  # Different name for the second agent
      - DOCKER=true
    volumes:
      - ./logs/:/app/logs  # Host ./logs/backend → /app/logs in container
    networks:
      - storybuilder-network  # Connect to the shared network

  agent-3:
    image: "agent-3"  # Unique image name for the second agent
    build:
      context: ./storybuilder/Agent/agent_container/  # Same build context as the first agent
      dockerfile: ./Dockerfile  # Same Dockerfile
    container_name: "agent-3"  # Unique container name for the second agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}  # OpenAI API key for the agent
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}  # DeepSeek API key for the agent
      - API_KEY=${DEEPSEEK_API_KEY}
      - AGENT_NAME=${AGENT_NAME}-3  # Different name for the second agent
      - DOCKER=true
    volumes:
      - ./logs/:/app/logs  # Host ./logs/backend → /app/logs in container
    networks:
      - storybuilder-network  # Connect to the shared network

  agent-4:
    image: "agent-4"  # Unique image name for the second agent
    build:
      context: ./storybuilder/Agent/agent_container/  # Same build context as the first agent
      dockerfile: ./Dockerfile  # Same Dockerfile
    container_name: "agent-4"  # Unique container name for the second agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}  # OpenAI API key for the agent
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}  # DeepSeek API key for the agent
      - API_KEY=${DEEPSEEK_API_KEY}
      - AGENT_NAME=${AGENT_NAME}-4  # Different name for the second agent
      - DOCKER=true
    volumes:
      - ./logs/:/app/logs  # Host ./logs/backend → /app/logs in container
    networks:
      - storybuilder-network  # Connect to the shared network

  agent-5:
    image: "agent-5"  # Unique image name for the second agent
    build:
      context: ./storybuilder/Agent/agent_container/  # Same build context as the first agent
      dockerfile: ./Dockerfile  # Same Dockerfile
    container_name: "agent-5"  # Unique container name for the second agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}  # OpenAI API key for the agent
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}  # DeepSeek API key for the agent
      - API_KEY=${DEEPSEEK_API_KEY}
      - AGENT_NAME=${AGENT_NAME}-5  # Different name for the second agent
      - DOCKER=true
    volumes:
      - ./logs/:/app/logs  # Host ./logs/backend → /app/logs in container
    networks:
      - storybuilder-network  # Connect to the shared network

  backend:
    image: "storybuilder-backend"  # Backend service image
    container_name: "storybuilder-backend"
    build:
      context: ./storybuilder/  # Path to the backend Dockerfile
      dockerfile: ./Backend/Dockerfile
    environment:
      - DB_URI=${DB_URI}  # MongoDB connection string
      - AGENT_URL=http://agent-{num}  # URL to access the agent service
      - DOCKER_HOST=0.0.0.0 # Allow backend to listen on all interfaces
      - DOCKER=true  # Indicate that this is running in a Docker environment
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./logs/:/app/logs  # Host ./logs/backend → /app/logs in container
    ports:
      - "8080:8080"  # Expose backend on port 8080
    networks:
      - storybuilder-network

networks:
  storybuilder-network:
    driver: bridge  # Use a bridge network for isolation and communication
    name: storybuilder-network  # Name of the network
    attachable: true  # Allow other containers to attach to this network
